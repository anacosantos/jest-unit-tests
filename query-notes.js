[{"content":"import {render, screen} from '@testing-library/react';\r\n\r\nfunction ColorList() {\r\n  return (\r\n    <ul> \r\n      <li>Red</li> \r\n      <li>Blue</li> \r\n      <li>Green</li> \r\n    </ul>\r\n  );\r\n}\r\n\r\nrender(<ColorList />)","type":"code","id":"rcqi9"},{"content":"test('getBy, queryBy, findBy, finding 0 elements', async() => {\r\nrender(<ColorList />);\r\n\r\n//screen.getByRole('textbox'); it doesnt work, for this reason i used the expect below\r\nexpect(() => screen.getByRole('textbox')).toThrow();\r\n\r\nexpect(screen.queryByRole('textbox')).toEqual(null);\r\n\r\nlet errorThrown = false;\r\ntry {\r\n  await screen.findByRole('textbox')\r\n} catch (err) {\r\n  errorThrown = true;\r\n}\r\nexpect(errorThrown).toEqual(true);\r\n});","type":"code","id":"64suj"},{"content":"test('getBy, queryBy, findBy when find 1 element', async () => {\r\n\r\nrender(<ColorList />);\r\n\r\nexpect(screen.getByRole('list')).toBeInTheDocument()\r\n\r\nexpect(screen.queryByRole('list')).toBeInTheDocument()\r\n//using await because its promise\r\nexpect(await screen.findByRole('list')).toBeInTheDocument()\r\n});","type":"code","id":"dsp0x"},{"content":"test('getBy, queryBy, findBy when find > elements', async () => {\r\n\r\nrender(<ColorList />);\r\n\r\nexpect(() => screen.getByRole('listitem')).toThrow();\r\n\r\nexpect(() => screen.queryByRole('listitem')).toThrow();\r\n\r\nlet errorThrown = false;\r\ntry {\r\n  await screen.findByRole('textbox')\r\n} catch (err) {\r\n  errorThrown = true;\r\n}\r\nexpect(errorThrown).toEqual(true);\r\n})","type":"code","id":"8mp41"},{"content":"test('getAllBy, queryAllBy, findAllBy', async() => {\n  render(<ColorList />);\n\nexpect(screen.getAllByRole('listitem')).toHaveLength(3);\n\nexpect(screen.queryAllByRole('listitem')).toHaveLength(3);\n\nexpect(await screen.findAllByRole('listitem')).toHaveLength(3);\n});","type":"code","id":"17he1"},{"content":"test('favor using getBy to prove an element exists', () => {\r\n\r\nrender(<ColorList />);\r\n\r\nconst element = screen.getByRole('list');\r\n\r\nexpect(element).toBeInTheDocument();\r\n\r\n//return null if there is some error\r\nscreen.queryByRole('list');\r\n})","type":"code","id":"vqb74"},{"content":"test('favor using queryBy to prove an element does not exist', () => {\r\n\r\nrender(<ColorList />);\r\n\r\nconst element = screen.queryByRole('textbox');\r\n\r\nexpect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"c4s67"},{"content":"import {useState, useEffect } from 'react';\r\n\r\nfunction fakeFetchColors() {\r\n  return Promise.resolve(\r\n    ['red', 'green', 'blue']\r\n  );\r\n}\r\n\r\nfunction LoadableColorList() {\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fakeFetchColors()\r\n      .then(colors => setColors(colors))\r\n  }, []);\r\n\r\n  const renderedColors = colors.map(color => {\r\n    return <li key={color}>{color}</li>\r\n  });\r\n\r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList />)","type":"code","id":"c4vzs"},{"content":"test('favor find or findAllBy when data fetching', async() => {\r\n\r\n  render(<LoadableColorList />)\r\n\r\n  const els = await screen.findAllByRole('listitem');\r\n\r\n  expect(els).toHaveLength(3)\r\n})","type":"code","id":"939wu"}]